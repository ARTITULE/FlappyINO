
#define OLED_RST 8
#define OLED_DC 9
#define OLED_CS 10
#define OLED_SPI_SPEED 4000000ul

#define Button_Pin 3
#define Menu_FPS 30
#define Game_FPS 30

#define EEPROM_KEY 0xB2  
#define KEY_EE_ADDR 0     
#define S1_HI_SCR_ADDR 1
#define S2_HI_SCR_ADDR 3     
#define S3_HI_SCR_ADDR 5    

#define INTERNAL_REF  1075L
#define BATTERY_FULL  4200
#define BATTERY_EMPTY 2900


#include <GyverOLED.h>
#include <GyverButton.h>
#include <EEPROM.h>
#include <SPI.h>


GyverOLED <SSD1306_128x64, OLED_BUFFER, OLED_SPI, OLED_CS, OLED_DC, OLED_RST> oled;
GButton main_button(Button_Pin);

int8_t Save_Amount = 3;

// ' Bird_Normal', 16x16px
const unsigned char bitmap__Bird_Normal [] PROGMEM = {
	0x00, 0xc0, 0x20, 0x20, 0x50, 0x88, 0x08, 0x08, 0xe8, 0x18, 0x58, 0xd0, 0x20, 0xc0, 0x00, 0x00, 
	0x00, 0x01, 0x06, 0x0a, 0x0a, 0x0b, 0x10, 0x10, 0x11, 0x16, 0x15, 0x15, 0x15, 0x15, 0x0d, 0x06
};
// ' Bird_Flapped', 16x16px
const unsigned char bitmap__Bird_Flapped [] PROGMEM = {
	0x00, 0xc0, 0x20, 0x20, 0x10, 0x08, 0x08, 0x08, 0xe8, 0x18, 0x58, 0xd0, 0x20, 0xc0, 0x00, 0x00, 
	0x00, 0x1d, 0x22, 0x22, 0x12, 0x0c, 0x10, 0x10, 0x11, 0x16, 0x15, 0x15, 0x15, 0x15, 0x0d, 0x06
};
// ' Background', 64x64px
const uint8_t bitmap__Background[] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// ' FlappyBird Logo', 90x24px
const uint8_t bitmap__FlappyBirdLogo[] PROGMEM = {
	0x00, 0xf8, 0xfc, 0xfe, 0xfe, 0xde, 0xde, 0xde, 0xde, 0xde, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 
	0xc0, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0xe0, 0xe0, 
	0xe0, 0xe0, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0xfe, 0xfe, 0xfe, 0xfe, 0x9e, 0xfe, 0xfe, 0xfc, 0xf8, 0x00, 0xe0, 0xe0, 0xe0, 0xe0, 0x00, 0x00, 
	0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xfe, 0xfe, 0xfe, 0xfe, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 
	0x07, 0x07, 0x07, 0x07, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 
	0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0x3f, 0x7f, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xff, 0x00, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xff, 0xff, 0xff, 0xff, 0x00, 0xfd, 0xfd, 0xfd, 0xfd, 0x00, 0xff, 0xff, 0xff, 0xff, 0x07, 0x03, 0x03, 
	0x03, 0x00, 0xff, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 
	0x03, 0x03, 0x03, 0x00, 0x00, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x00, 0x3f, 0x3f, 0x3f, 0x3f, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 
	0x3f, 0x3f, 0x3f, 0x3f, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x3f, 0x3f, 0x3f, 0x1f, 0x0f, 0x00, 0x03, 0x03, 0x03, 0x03, 
	0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x03, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x03, 
	0x03, 0x03, 0x03, 0x03, 0x03, 0x00
};
// ' Low pipe', 16x64px
const uint8_t bitmap__Low_pipe[] PROGMEM = {
	0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xc3, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x40, 0x7f, 0x7e, 0x60, 0x60, 0x40, 0x40, 0x40, 0xc0, 0xc0, 0x7f, 0x40, 0x40, 0xc0, 
	0x0f, 0x09, 0x09, 0x0a, 0x0a, 0x0c, 0x0c, 0x08, 0x08, 0x08, 0x08, 0x08, 0x09, 0x09, 0x0a, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x4a, 0x4a, 0xd2, 0x52, 0x62, 0x62, 0x42, 
	0x42, 0x42, 0x46, 0xc6, 0xca, 0x4a, 0x52, 0x7e
};
// ' Middle pipe', 16x64px
const uint8_t bitmap__Middle_pipe[] PROGMEM = {
	0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x00, 0x00, 0x00, 0xf8, 0x28, 0x28, 0x4f, 0x4f, 0x8c, 0x88, 0x08, 
	0x08, 0x08, 0x18, 0x18, 0x2f, 0x28, 0x48, 0xf8, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 
	0x1f, 0x12, 0x12, 0xf4, 0x94, 0x18, 0x18, 0x10, 0x10, 0x10, 0x31, 0xd1, 0xf2, 0x12, 0x14, 0x1f, 0x00, 0x00, 0x00, 0xff, 0xcf, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00
};
// ' Top pipe', 16x64px
const uint8_t bitmap__Top_pipe[] PROGMEM = {
	0x7e, 0x4a, 0x4a, 0x53, 0x53, 0x53, 0x62, 0x62, 0x42, 0x46, 0x46, 0x4a, 0x4b, 0x4a, 0x52, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xa0, 0xa0, 0x60, 0x60, 0x20, 0x20, 0x20, 
	0xa0, 0xa0, 0x60, 0x60, 0x20, 0x20, 0x20, 0xe0, 0x07, 0x04, 0x04, 0xfc, 0xf6, 0x0e, 0x05, 0x05, 0x04, 0x04, 0x04, 0xe4, 0xfe, 0x06, 0x05, 0x07, 
	0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x78, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00
};


void setup() {
  
	Serial.begin(9600);
	main_button.setTickMode(AUTO);
	main_button.setStepTimeout(500);

  oled.init();
  oled.clear();

  if (EEPROM[KEY_EE_ADDR] != EEPROM_KEY) {    
    EEPROM[KEY_EE_ADDR] = EEPROM_KEY;         
    EEPROM[S1_HI_SCR_ADDR] = 0;
    EEPROM[S1_HI_SCR_ADDR + 1] = 0;
		EEPROM[S2_HI_SCR_ADDR] = 0;
    EEPROM[S2_HI_SCR_ADDR + 1] = 0;
    EEPROM[S3_HI_SCR_ADDR] = 0;
    EEPROM[S3_HI_SCR_ADDR + 1] = 0;
  }


	ADMUX = DEFAULT << 6 | 0b1110;      
  ADCSRA = 1 << ADEN | 0b101;         
  for (uint8_t i = 0; i < 8; i++) {   
    ADCSRA |= 1 << ADSC;              
    while (ADCSRA & (1 << ADSC));     
  }

}

void loop() {
  
	static uint32_t LoopTimer = millis();
	if (millis() - LoopTimer >= 1000 / Menu_FPS) {
	
		oled.clear();
		oled.drawBitmap(19, 15, bitmap__FlappyBirdLogo, 90, 24);
		oled.setCursorXY(25, 45);
		oled.setScale(1);
		oled.print("Press To Play");
		batCheckDraw();
		oled.update();
		if (main_button.isClick()) {
			MainMenu();
		}

	}
}

void MainMenu() {
	
	while (1) {
		static uint8_t MenuPointer = 0;

		if (main_button.isClick()) {
			MenuPointer += 3;
			if (MenuPointer >= Save_Amount * 3) {
			MenuPointer = 0;
			}
		}

		if (main_button.isHold()) {
			switch (MenuPointer) {
				case 0: FBirdGame(S1_HI_SCR_ADDR, 0); break;
				case 3: FBirdGame(S2_HI_SCR_ADDR, 1); break;
				case 6: FBirdGame(S3_HI_SCR_ADDR, 2); break;
			}
		}

		static uint32_t MenuDrawTimer = millis();
		if (millis() - MenuDrawTimer >= 1000 / Menu_FPS) {
			MenuDrawTimer = millis();
			oled.clear();
			oled.setScale(1);
			oled.setCursor(10, 0); oled.print(F("Easy (Mars)"));
			oled.setCursor(10, 1); oled.print(F("High Score : ")); oled.print(EEPROM.read(S1_HI_SCR_ADDR));
			oled.setCursor(10, 3); oled.print(F("Medium (Earth)"));
			oled.setCursor(10, 4); oled.print(F("High Score : ")); oled.print(EEPROM.read(S2_HI_SCR_ADDR));
			oled.setCursor(10, 6); oled.print(F("Hard (Jupiter)"));
			oled.setCursor(10, 7); oled.print(F("High Score : ")); oled.print(EEPROM.read(S3_HI_SCR_ADDR));
			oled.setScale(2);
			oled.setCursor(118, MenuPointer); oled.print("<"); 
			oled.update(); 
		}
	}
	
}

void WaitingScreen() {
	oled.clear(); oled.setScale(4);
	oled.setCursor(54, 3); oled.print("3");
	oled.update();
	delay(800);

	oled.clear(); oled.setCursor(54, 3); oled.print("2");
	oled.update();
	delay(800);

	oled.clear(); oled.setCursor(54, 3); oled.print("1");
	oled.update();
	delay(800);

	oled.clear(); oled.setCursor(54, 3); oled.print("0");
	oled.update();
}

void batCheckDraw(void) {
  static uint32_t measureTimer = millis() + 3500;  
  static uint8_t batCharge = 0;                    

  if (millis() - measureTimer >= 3000) {
    measureTimer = millis();
    ADCSRA |= 1 << ADSC;                
    while (ADCSRA & (1 << ADSC));      
    batCharge = constrain(map((INTERNAL_REF * 1024UL) / ADC, BATTERY_EMPTY, BATTERY_FULL, 0, 12), 0, 12);
  }

  oled.setCursorXY(110, 2);                             
  oled.drawByte(0b00111100);                           
  oled.drawByte(0b00111100);                            
  oled.drawByte(0b11111111);                            
  for (uint8_t i = 0; i < 12; i++) {                    
    if (i < 12 - batCharge)oled.drawByte(0b10000001);  
    else oled.drawByte(0b11111111);                     
  } oled.drawByte(0b11111111);                          
}